import { NextRequest, NextResponse } from 'next/server'
import { getProjects, getProjectById } from '../../../lib/database'

export async function GET(request: NextRequest) {
  try {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä id –∏–∑ URL –µ—Å–ª–∏ –µ—Å—Ç—å
    const { searchParams } = new URL(request.url)
    const id = searchParams.get('id')
    
    if (id) {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ ID
      const projectId = parseInt(id, 10)
      
      if (isNaN(projectId)) {
        return NextResponse.json(
          { 
            success: false, 
            error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞'
          },
          { status: 400 }
        )
      }
      
      const project = await getProjectById(projectId)
      
      if (!project) {
        return NextResponse.json(
          { 
            success: false, 
            error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
          },
          { status: 404 }
        )
      }
      
      return NextResponse.json({
        success: true,
        project
      })
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
    const projects = await getProjects()
    
    return NextResponse.json({
      success: true,
      projects,
      count: projects.length
    })
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', error)
    
    return NextResponse.json(
      { 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤',
        details: error.message
      },
      { status: 500 }
    )
  }
}
