import { NextRequest, NextResponse } from 'next/server'
import puppeteer from 'puppeteer'
import { generatePDFTemplate, ProposalData } from '../../../lib/pdf-template'

export async function POST(request: NextRequest) {
  try {
    const data = await request.json()
    const { contact } = data

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    const pdfBuffer = await generatePDF(data)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    await sendToTelegram(contact, pdfBuffer)

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Error sending proposal:', error)
    return NextResponse.json(
      { error: 'Failed to send proposal' },
      { status: 500 }
    )
  }
}

async function generatePDF(data: ProposalData): Promise<Buffer> {
  let browser;
  let page;
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º Puppeteer –±—Ä–∞—É–∑–µ—Ä —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox', 
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor',
        '--no-first-run',
        '--no-default-browser-check',
        '--disable-extensions',
        '--disable-plugins',
        '--disable-background-networking',
        '--disable-background-timer-throttling',
        '--disable-backgrounding-occluded-windows',
        '--disable-renderer-backgrounding',
        '--disable-ipc-flooding-protection'
      ],
      timeout: 60000
    });

    page = await browser.newPage();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª—å—à–∏–π viewport –∏ —Ç–∞–π–º–∞—É—Ç—ã
    await page.setViewport({ width: 1200, height: 800 });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç
    const htmlContent = generatePDFTemplate(data);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
    await page.setContent(htmlContent, { 
      waitUntil: 'domcontentloaded',
      timeout: 60000 
    });

    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.evaluateHandle('document.fonts.ready');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
    const pdfBuffer = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: {
        top: '20mm',
        right: '15mm', 
        bottom: '20mm',
        left: '15mm'
      },
      displayHeaderFooter: false,
      preferCSSPageSize: true,
      timeout: 60000
    });

    return Buffer.from(pdfBuffer);
  } catch (error) {
    console.error('Error generating PDF with Puppeteer:', error);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    if (page && !page.isClosed()) {
      try {
        await page.close();
      } catch (closeError) {
        console.error('Error closing page:', closeError);
      }
    }
    
    // Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π HTML PDF –µ—Å–ª–∏ Puppeteer –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    return await generateFallbackPDF(data);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    if (browser) {
      try {
        await browser.close();
      } catch (closeError) {
        console.error('Error closing browser:', closeError);
      }
    }
  }
}

// Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ PDF –µ—Å–ª–∏ Puppeteer –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
async function generateFallbackPDF(data: ProposalData): Promise<Buffer> {
  console.log('Using fallback PDF generation...');
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTML –¥–æ–∫—É–º–µ–Ω—Ç
  const htmlContent = `
    <html>
      <body style="font-family: Arial, sans-serif; margin: 40px; line-height: 1.6;">
        <h1 style="color: #007BFF;">–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ IT-—Ä–µ—à–µ–Ω–∏—è</h1>
        <p><strong>–î–∞—Ç–∞:</strong> ${new Date().toLocaleDateString('ru-RU')}</p>
        <p><strong>–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞:</strong> -10%</p>
        
        <h2>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h2>
        <p><strong>–§–ò–û:</strong> ${data.contact.fullName}</p>
        <p><strong>WhatsApp:</strong> ${data.contact.whatsapp}</p>
        
        <h2>–ü—Ä–æ–µ–∫—Ç: ${data.proposal.title}</h2>
        <p>${data.proposal.description}</p>
        
        <h2 style="color: #28a745;">–°—Ç–æ–∏–º–æ—Å—Ç—å</h2>
        <p style="font-size: 24px; color: #28a745;"><strong>${Math.round(data.totalPrice * 0.9).toLocaleString()} KGS</strong> (—Å–æ —Å–∫–∏–¥–∫–æ–π 10%)</p>
        <p><em>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${data.totalPrice.toLocaleString()} KGS</em></p>
        <p><strong>–°—Ä–æ–∫:</strong> ${data.totalWeeks} –Ω–µ–¥–µ–ª—å</p>
        
        <h2>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å</h2>
        <ul>
          ${data.proposal.functionality?.map(func => `<li>${func}</li>`).join('') || '<li>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</li>'}
        </ul>
        
        <h2>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏</h2>
        <ol>
          ${data.proposal.nextSteps?.map(step => `<li>${step}</li>`).join('') || '<li>–°–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π</li>'}
        </ol>
        
        <p style="margin-top: 40px; color: #666; font-size: 12px;">
          –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π<br>
          ¬© ${new Date().getFullYear()} Codev - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ IT-—Ä–µ—à–µ–Ω–∏–π
        </p>
      </body>
    </html>
  `;
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML –∫–∞–∫ –±—É—Ñ–µ—Ä (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ HTML –≤—ã–≤–æ–¥–∞)
  return Buffer.from(htmlContent, 'utf-8');
}

async function sendToTelegram(contact: { fullName: string; whatsapp: string }, pdfBuffer: Buffer) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  const adminId = process.env.ADMINS_TELEGRAM_ID

  if (!botToken || !adminId) {
    console.log('Telegram bot not configured, skipping Telegram send...')
    console.log('PDF generated successfully for:', contact.fullName)
    console.log('PDF size:', pdfBuffer.length, 'bytes')
    return // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram –µ—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const message = `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É!\n\nüë§ –§–ò–û: ${contact.fullName}\nüì± WhatsApp: ${contact.whatsapp}\n\nüìÑ PDF —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –Ω–∏–∂–µ.`

  const textResponse = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: adminId,
      text: message,
      parse_mode: 'HTML'
    }),
  })

  if (!textResponse.ok) {
    throw new Error('Failed to send text message to Telegram')
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
  const formData = new FormData()
  formData.append('chat_id', adminId)
  formData.append('document', new Blob([pdfBuffer.buffer], { type: 'application/pdf' }), `proposal_${contact.fullName.replace(/\s+/g, '_')}.pdf`)
  formData.append('caption', `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è ${contact.fullName}`)

  const pdfResponse = await fetch(`https://api.telegram.org/bot${botToken}/sendDocument`, {
    method: 'POST',
    body: formData,
  })

  if (!pdfResponse.ok) {
    throw new Error('Failed to send PDF to Telegram')
  }
}
