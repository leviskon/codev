import { NextRequest, NextResponse } from 'next/server'
import { jsPDF } from 'jspdf'

export async function POST(request: NextRequest) {
  try {
    const data = await request.json()
    const { contact, proposal, selectedRecommendations, projectData, totalPrice, totalWeeks } = data

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    const pdfBuffer = await generatePDF(data)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    await sendToTelegram(contact, pdfBuffer)

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Error sending proposal:', error)
    return NextResponse.json(
      { error: 'Failed to send proposal' },
      { status: 500 }
    )
  }
}

async function generatePDF(data: any): Promise<Buffer> {
  try {
    const doc = new jsPDF()
    let yPosition = 20

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫
    const addText = (text: string, fontSize: number = 12, isBold: boolean = false, isTitle: boolean = false) => {
      doc.setFontSize(fontSize)
      if (isBold) {
        doc.setFont('helvetica', 'bold')
      } else {
        doc.setFont('helvetica', 'normal')
      }

      const pageWidth = doc.internal.pageSize.width
      const margin = 20
      const maxWidth = pageWidth - (2 * margin)
      
      if (isTitle) {
        // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const textWidth = doc.getStringUnitWidth(text) * fontSize / doc.internal.scaleFactor
        const textOffset = (pageWidth - textWidth) / 2
        doc.text(text, textOffset, yPosition)
      } else {
        // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º
        const lines = doc.splitTextToSize(text, maxWidth)
        doc.text(lines, margin, yPosition)
        yPosition += (lines.length - 1) * (fontSize * 0.35)
      }
      
      yPosition += fontSize * 0.5
    }

    const addSpacing = (space: number = 5) => {
      yPosition += space
    }

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    addText('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ IT-—Ä–µ—à–µ–Ω–∏—è', 16, true, true)
    addSpacing(10)

    // –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    addText('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', 14, true)
    addText(`–§–ò–û: ${data.contact.fullName}`)
    addText(`WhatsApp: ${data.contact.whatsapp}`)
    addSpacing()

    // –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
    addText('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞:', 14, true)
    addText(`–°—Ñ–µ—Ä–∞ –±–∏–∑–Ω–µ—Å–∞: ${data.projectData.business}`)
    addText(`–¶–µ–ª–∏: ${data.projectData.goals.join(', ')}`)
    addText(`–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: ${data.projectData.technologies.join(', ')}`)
    addText(`–ë—é–¥–∂–µ—Ç: ${data.projectData.budgetRange.min.toLocaleString()} - ${data.projectData.budgetRange.max.toLocaleString()} KGS`)
    addText(`–°—Ä–æ–∫–∏: ${data.projectData.timelineRange.min} - ${data.projectData.timelineRange.max} –Ω–µ–¥–µ–ª—å`)
    if (data.projectData.context) {
      addText(`–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${data.projectData.context}`)
    }
    addSpacing()

    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    addText('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:', 14, true)
    addText(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${data.proposal.title}`)
    addText(`–û–ø–∏—Å–∞–Ω–∏–µ: ${data.proposal.description}`)
    addText(`–°—Ç–æ–∏–º–æ—Å—Ç—å: ${data.totalPrice.toLocaleString()} KGS`)
    addText(`–°—Ä–æ–∫–∏: ${data.totalWeeks} –Ω–µ–¥–µ–ª—å`)
    addSpacing()

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (yPosition > 250) {
      doc.addPage()
      yPosition = 20
    }

    // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    if (data.proposal.functionality?.length > 0) {
      addText('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:', 14, true)
      data.proposal.functionality.forEach((func: string, index: number) => {
        addText(`${index + 1}. ${func}`)
        if (yPosition > 270) {
          doc.addPage()
          yPosition = 20
        }
      })
      addSpacing()
    }

    // –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (data.selectedRecommendations?.length > 0) {
      if (yPosition > 250) {
        doc.addPage()
        yPosition = 20
      }
      addText('–í–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:', 14, true)
      data.selectedRecommendations.forEach((recIndex: number) => {
        const rec = data.proposal.additional_recommendations[recIndex]
        if (rec) {
          addText(`‚Ä¢ ${rec.title} (+${rec.additional_cost.toLocaleString()} KGS, +${rec.additional_weeks} –Ω–µ–¥.)`)
        }
      })
      addSpacing()
    }

    // –≠—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (data.proposal.phases?.length > 0) {
      if (yPosition > 230) {
        doc.addPage()
        yPosition = 20
      }
      addText('–≠—Ç–∞–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:', 14, true)
      data.proposal.phases.forEach((phase: any, index: number) => {
        addText(`${index + 1}. ${phase.name} (${phase.duration_weeks} –Ω–µ–¥.)`)
        addText(`   ${phase.description}`)
        if (yPosition > 270) {
          doc.addPage()
          yPosition = 20
        }
      })
      addSpacing()
    }

    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫
    if (data.proposal.technical_stack) {
      if (yPosition > 250) {
        doc.addPage()
        yPosition = 20
      }
      addText('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫:', 14, true)
      const stack = data.proposal.technical_stack
      if (stack.frontend?.length) addText(`Frontend: ${stack.frontend.join(', ')}`)
      if (stack.backend?.length) addText(`Backend: ${stack.backend.join(', ')}`)
      if (stack.database?.length) addText(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${stack.database.join(', ')}`)
      if (stack.deployment?.length) addText(`–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: ${stack.deployment.join(', ')}`)
      addSpacing()
    }

    // –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    if (data.proposal.nextSteps?.length > 0) {
      if (yPosition > 230) {
        doc.addPage()
        yPosition = 20
      }
      addText('–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:', 14, true)
      data.proposal.nextSteps.forEach((step: string, index: number) => {
        addText(`${index + 1}. ${step}`)
      })
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Buffer
    const pdfOutput = doc.output('arraybuffer')
    return Buffer.from(pdfOutput)
  } catch (error) {
    throw error
  }
}

async function sendToTelegram(contact: any, pdfBuffer: Buffer) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  const adminId = process.env.ADMINS_TELEGRAM_ID

  if (!botToken || !adminId) {
    throw new Error('Telegram bot token or admin ID not configured')
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const message = `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É!\n\nüë§ –§–ò–û: ${contact.fullName}\nüì± WhatsApp: ${contact.whatsapp}\n\nüìÑ PDF —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –Ω–∏–∂–µ.`

  const textResponse = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: adminId,
      text: message,
      parse_mode: 'HTML'
    }),
  })

  if (!textResponse.ok) {
    throw new Error('Failed to send text message to Telegram')
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
  const formData = new FormData()
  formData.append('chat_id', adminId)
  formData.append('document', new Blob([pdfBuffer], { type: 'application/pdf' }), `proposal_${contact.fullName.replace(/\s+/g, '_')}.pdf`)
  formData.append('caption', `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è ${contact.fullName}`)

  const pdfResponse = await fetch(`https://api.telegram.org/bot${botToken}/sendDocument`, {
    method: 'POST',
    body: formData,
  })

  if (!pdfResponse.ok) {
    throw new Error('Failed to send PDF to Telegram')
  }
}
