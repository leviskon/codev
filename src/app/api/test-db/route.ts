import { NextRequest, NextResponse } from 'next/server'
import { testDatabaseConnection, getAdminTelegramIds } from '../../../lib/database'

export async function GET(request: NextRequest) {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    const isConnected = await testDatabaseConnection()
    
    if (!isConnected) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
          connection: false
        },
        { status: 500 }
      )
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ Telegram ID
    const adminIds = await getAdminTelegramIds()
    
    return NextResponse.json({
      success: true,
      connection: true,
      message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ',
      adminTelegramIds: adminIds,
      adminCount: adminIds.length,
      databaseUrl: process.env.DATABASE_URL ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
    })
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î:', error)
    
    return NextResponse.json(
      { 
        success: false, 
        error: error.message,
        connection: false
      },
      { status: 500 }
    )
  }
}
